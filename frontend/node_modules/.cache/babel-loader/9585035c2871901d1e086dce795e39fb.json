{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const fetchInsurancePolicyTypes = createAsyncThunk(\"insuranceTypeVendor/fetchInsurancePolicyTypes\", async () => {\n  try {\n    const response = await axios.get(`https://gjkl2w4at2.execute-api.us-east-2.amazonaws.com/dev/policytypes`);\n\n    if (response.status > 299) {\n      console.log('fetchInsurancePolicyTypes api response:- ', response);\n      let obj = {\n        status: 500,\n        data: response.data\n      };\n      return obj;\n    } else {\n      console.log('fetchInsurancePolicyTypes api response:- ', response);\n      let obj = {\n        status: 200,\n        data: response.data\n      };\n      return obj;\n    }\n  } catch (err) {\n    console.log(err.response.data);\n    let obj = {\n      status: 500,\n      ...err.response.data\n    };\n    return obj;\n  }\n});\nconst insuranceTypeVendorSlice = createSlice({\n  name: \"insuranceTypeVendor\",\n  initialState: {\n    loading: false,\n    insuranceType: []\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchInsurancePolicyTypes.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchInsurancePolicyTypes.fulfilled]: (state, action) => {\n      state.loading = false;\n\n      if (action.payload.status == 200) {\n        console.log(action.payload);\n        state.insuranceType = [...action.payload.data];\n      }\n    },\n    [fetchInsurancePolicyTypes.rejected]: (state, action) => {\n      state.loading = false;\n    }\n  }\n}); // export const { setUserDetailsFromSS, logoutTheUser } = insuranceTypeVendorSlice.actions;\n\nexport default insuranceTypeVendorSlice.reducer;","map":{"version":3,"sources":["/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/src/reducers/InsuranceTypeVendorReducer.js"],"names":["createAsyncThunk","createSlice","axios","fetchInsurancePolicyTypes","response","get","status","console","log","obj","data","err","insuranceTypeVendorSlice","name","initialState","loading","insuranceType","reducers","extraReducers","pending","state","action","fulfilled","payload","rejected","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,yBAAyB,GAAGH,gBAAgB,CAAC,+CAAD,EAAkD,YAAY;AACnH,MAAI;AACA,UAAMI,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAN,CAAW,wEAAX,CAAvB;;AACA,QAAID,QAAQ,CAACE,MAAT,GAAkB,GAAtB,EAA2B;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAyDJ,QAAzD;AACA,UAAIK,GAAG,GAAG;AACNH,QAAAA,MAAM,EAAE,GADF;AACOI,QAAAA,IAAI,EAAEN,QAAQ,CAACM;AADtB,OAAV;AAGA,aAAOD,GAAP;AACH,KAND,MAMO;AACHF,MAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAyDJ,QAAzD;AACA,UAAIK,GAAG,GAAG;AACNH,QAAAA,MAAM,EAAE,GADF;AACOI,QAAAA,IAAI,EAAEN,QAAQ,CAACM;AADtB,OAAV;AAGA,aAAOD,GAAP;AACH;AAGJ,GAjBD,CAiBE,OAAOE,GAAP,EAAY;AACVJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,GAAG,CAACP,QAAJ,CAAaM,IAAzB;AACA,QAAID,GAAG,GAAG;AACNH,MAAAA,MAAM,EAAE,GADF;AACO,SAAGK,GAAG,CAACP,QAAJ,CAAaM;AADvB,KAAV;AAGA,WAAOD,GAAP;AACH;AACJ,CAzBwD,CAAlD;AA8BP,MAAMG,wBAAwB,GAAGX,WAAW,CAAC;AACzCY,EAAAA,IAAI,EAAE,qBADmC;AAEzCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,OAAO,EAAE,KADC;AAEVC,IAAAA,aAAa,EAAE;AAFL,GAF2B;AAMzCC,EAAAA,QAAQ,EAAE,EAN+B;AAQzCC,EAAAA,aAAa,EAAE;AACX,KAACf,yBAAyB,CAACgB,OAA3B,GAAqC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpDD,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACH,KAHU;AAIX,KAACZ,yBAAyB,CAACmB,SAA3B,GAAuC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACtDD,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;;AACA,UAAIM,MAAM,CAACE,OAAP,CAAejB,MAAf,IAAyB,GAA7B,EAAkC;AAC9BC,QAAAA,OAAO,CAACC,GAAR,CAAYa,MAAM,CAACE,OAAnB;AACAH,QAAAA,KAAK,CAACJ,aAAN,GAAsB,CAAC,GAAGK,MAAM,CAACE,OAAP,CAAeb,IAAnB,CAAtB;AACH;AAEJ,KAXU;AAYX,KAACP,yBAAyB,CAACqB,QAA3B,GAAsC,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACrDD,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACH;AAdU;AAR0B,CAAD,CAA5C,C,CA0BA;;AAEA,eAAeH,wBAAwB,CAACa,OAAxC","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const fetchInsurancePolicyTypes = createAsyncThunk(\"insuranceTypeVendor/fetchInsurancePolicyTypes\", async () => {\n    try {\n        const response = await axios.get(`https://gjkl2w4at2.execute-api.us-east-2.amazonaws.com/dev/policytypes`);\n        if (response.status > 299) {\n            console.log('fetchInsurancePolicyTypes api response:- ', response)\n            let obj = {\n                status: 500, data: response.data\n            }\n            return obj;\n        } else {\n            console.log('fetchInsurancePolicyTypes api response:- ', response)\n            let obj = {\n                status: 200, data: response.data\n            }\n            return obj;\n        }\n\n\n    } catch (err) {\n        console.log(err.response.data);\n        let obj = {\n            status: 500, ...err.response.data\n        }\n        return obj;\n    }\n});\n\n\n\n\nconst insuranceTypeVendorSlice = createSlice({\n    name: \"insuranceTypeVendor\",\n    initialState: {\n        loading: false,\n        insuranceType: [],\n    },\n    reducers: {\n    },\n    extraReducers: {\n        [fetchInsurancePolicyTypes.pending]: (state, action) => {\n            state.loading = true;\n        },\n        [fetchInsurancePolicyTypes.fulfilled]: (state, action) => {\n            state.loading = false;\n            if (action.payload.status == 200) {\n                console.log(action.payload);\n                state.insuranceType = [...action.payload.data];\n            }\n\n        },\n        [fetchInsurancePolicyTypes.rejected]: (state, action) => {\n            state.loading = false;\n        },\n    },\n});\n\n// export const { setUserDetailsFromSS, logoutTheUser } = insuranceTypeVendorSlice.actions;\n\nexport default insuranceTypeVendorSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}