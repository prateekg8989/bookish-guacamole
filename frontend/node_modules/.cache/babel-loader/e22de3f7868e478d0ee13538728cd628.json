{"ast":null,"code":"var _jsxFileName = \"/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/src/Admin/AdminDashboard/GraphAgent/GraphAgent.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./GraphAgent.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Row, Col, Button, InputGroup } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport { Chart, ChartLegend, ChartSeries, ChartSeriesItem, ChartTitle } from \"@progress/kendo-react-charts\";\nimport \"hammerjs\";\nimport { fetchDataForAgents } from \"../../../reducers/DashboardReducer\";\nimport { fetchInsurancePolicyTypes } from \"../../../reducers/InsuranceTypeVendorReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GraphAgent() {\n  _s();\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const {\n    loading,\n    dataByAgent\n  } = useSelector(state => state.dashboard);\n  const insuranceTypeVendor = useSelector(state => state.insuranceTypeVendor);\n  const [dataByAgent1, setDataByAgent1] = useState([]);\n  const [insuranceType, setInsuranceType] = useState({});\n  const [vendorId, setVendorId] = useState(\"\");\n  useEffect(() => {\n    dispatch(fetchInsurancePolicyTypes());\n  }, []);\n  useEffect(() => {\n    if (!loading && dataByAgent) {\n      setDataByAgent1(dataByAgent);\n    }\n  }, [loading, dataByAgent]);\n\n  const handleChangeInsuranceType = data => {\n    if (data == \"null\") {\n      dispatch(fetchDataForAgents(null));\n    } else {\n      let insuranceTypeObj = JSON.parse(data);\n\n      if (insuranceTypeObj && insuranceTypeObj.insuranceTypeId != \"\") {\n        let obj = {\n          insuranceTypeId: insuranceTypeObj.insuranceTypeId\n        };\n        setInsuranceType(insuranceTypeObj);\n        dispatch(fetchDataForAgents(obj));\n      }\n    }\n  };\n\n  const handleChangeVendor = id => {\n    if (id && id != \"\") {\n      let obj = {\n        insuranceTypeId: insuranceType.insuranceTypeId,\n        vendorId: id\n      };\n      setVendorId(id);\n      dispatch(fetchDataForAgents(obj));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-md-12 d-flex m-0 p-0\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-6\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Row,\n          controlId: \"exampleForm.ControlSelect1\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            column: true,\n            sm: 2,\n            children: \"Insurance Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            sm: 10,\n            className: \"pr-5\",\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              required: true,\n              as: \"select\",\n              onChange: event => handleChangeInsuranceType(event.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"null\",\n                children: \"Please select insurance type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 17\n              }, this), insuranceTypeVendor && insuranceTypeVendor.insuranceType && insuranceTypeVendor.insuranceType.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: JSON.stringify(item),\n                children: item.insuranceTypeName\n              }, item.insuranceTypeId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Row,\n          controlId: \"exampleForm.ControlSelect2\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            column: true,\n            sm: 2,\n            children: \"Vendor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            sm: 10,\n            className: \"pr-5\",\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              required: true,\n              as: \"select\",\n              onChange: event => handleChangeVendor(event.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: null,\n                children: \"Please select insurance type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 17\n              }, this), insuranceType && insuranceType.listOfVendors && insuranceType.listOfVendors.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: item.vendorId,\n                children: item.vendorName\n              }, item.vendorId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-6\",\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        children: [/*#__PURE__*/_jsxDEV(ChartTitle, {\n          text: \"Count of insurance sold, distributed by agents \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChartLegend, {\n          position: \"bottom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChartSeries, {\n          children: /*#__PURE__*/_jsxDEV(ChartSeriesItem, {\n            type: \"pie\",\n            data: dataByAgent1,\n            field: \"totalCount\",\n            categoryField: \"agentName\",\n            labels: {\n              visible: true,\n              content: props => {\n                return `Count : ${props.dataItem.totalCount}`;\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GraphAgent, \"06HFAUv+8eeveeMNsu+p+zb7mGA=\", false, function () {\n  return [useHistory, useDispatch, useSelector, useSelector];\n});\n\n_c = GraphAgent;\nexport default GraphAgent;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphAgent\");","map":{"version":3,"sources":["/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/src/Admin/AdminDashboard/GraphAgent/GraphAgent.jsx"],"names":["React","useEffect","useState","faTrash","faPencilAlt","FontAwesomeIcon","useDispatch","useSelector","Form","Row","Col","Button","InputGroup","useHistory","Chart","ChartLegend","ChartSeries","ChartSeriesItem","ChartTitle","fetchDataForAgents","fetchInsurancePolicyTypes","GraphAgent","history","dispatch","loading","dataByAgent","state","dashboard","insuranceTypeVendor","dataByAgent1","setDataByAgent1","insuranceType","setInsuranceType","vendorId","setVendorId","handleChangeInsuranceType","data","insuranceTypeObj","JSON","parse","insuranceTypeId","obj","handleChangeVendor","id","event","target","value","map","item","stringify","insuranceTypeName","listOfVendors","vendorName","visible","content","props","dataItem","totalCount"],"mappings":"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","sourcesContent":["import \"./GraphAgent.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Row, Col, Button, InputGroup } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Chart,\n  ChartLegend,\n  ChartSeries,\n  ChartSeriesItem,\n  ChartTitle,\n} from \"@progress/kendo-react-charts\";\nimport \"hammerjs\";\n\nimport { fetchDataForAgents } from \"../../../reducers/DashboardReducer\";\nimport { fetchInsurancePolicyTypes } from \"../../../reducers/InsuranceTypeVendorReducer\";\nfunction GraphAgent() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { loading, dataByAgent } = useSelector((state) => state.dashboard);\n  const insuranceTypeVendor = useSelector((state) => state.insuranceTypeVendor);\n  const [dataByAgent1, setDataByAgent1] = useState([]);\n  const [insuranceType, setInsuranceType] = useState({});\n  const [vendorId, setVendorId] = useState(\"\");\n  useEffect(() => {\n    dispatch(fetchInsurancePolicyTypes());\n  }, []);\n\n  useEffect(() => {\n    if (!loading && dataByAgent) {\n      setDataByAgent1(dataByAgent);\n    }\n  }, [loading, dataByAgent]);\n\n  const handleChangeInsuranceType = (data) => {\n    if (data == \"null\") {\n      dispatch(fetchDataForAgents(null));\n    } else {\n      let insuranceTypeObj = JSON.parse(data);\n      if (insuranceTypeObj && insuranceTypeObj.insuranceTypeId != \"\") {\n        let obj = { insuranceTypeId: insuranceTypeObj.insuranceTypeId };\n        setInsuranceType(insuranceTypeObj);\n        dispatch(fetchDataForAgents(obj));\n      }\n    }\n  };\n\n  const handleChangeVendor = (id) => {\n    if (id && id != \"\") {\n      let obj = {\n        insuranceTypeId: insuranceType.insuranceTypeId,\n        vendorId: id,\n      };\n      setVendorId(id);\n      dispatch(fetchDataForAgents(obj));\n    }\n  };\n\n  return (\n    <div className=\"col-md-12 d-flex m-0 p-0\">\n      <div className=\"col-md-6\">\n        <Form>\n          <Form.Group as={Row} controlId=\"exampleForm.ControlSelect1\">\n            <Form.Label column sm={2}>\n              Insurance Type\n            </Form.Label>\n            <Col sm={10} className=\"pr-5\">\n              <Form.Control\n                required\n                as=\"select\"\n                onChange={(event) =>\n                  handleChangeInsuranceType(event.target.value)\n                }\n              >\n                <option value={\"null\"}>Please select insurance type</option>\n                {insuranceTypeVendor &&\n                  insuranceTypeVendor.insuranceType &&\n                  insuranceTypeVendor.insuranceType.map((item) => (\n                    <option\n                      value={JSON.stringify(item)}\n                      key={item.insuranceTypeId}\n                    >\n                      {item.insuranceTypeName}\n                    </option>\n                  ))}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"exampleForm.ControlSelect2\">\n            <Form.Label column sm={2}>\n              Vendor\n            </Form.Label>\n            <Col sm={10} className=\"pr-5\">\n              <Form.Control\n                required\n                as=\"select\"\n                onChange={(event) => handleChangeVendor(event.target.value)}\n              >\n                <option value={null}>Please select insurance type</option>\n                {insuranceType &&\n                  insuranceType.listOfVendors &&\n                  insuranceType.listOfVendors.map((item) => (\n                    <option value={item.vendorId} key={item.vendorId}>\n                      {item.vendorName}\n                    </option>\n                  ))}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n        </Form>\n      </div>\n      <div className=\"col-md-6\">\n        <Chart>\n          <ChartTitle text=\"Count of insurance sold, distributed by agents \" />\n          <ChartLegend position=\"bottom\" />\n          <ChartSeries>\n            <ChartSeriesItem\n              type=\"pie\"\n              data={dataByAgent1}\n              field=\"totalCount\"\n              categoryField=\"agentName\"\n              labels={{\n                visible: true,\n                content: (props) => {\n                  return `Count : ${props.dataItem.totalCount}`;\n                },\n              }}\n            />\n          </ChartSeries>\n        </Chart>\n      </div>\n    </div>\n  );\n}\n\nexport default GraphAgent;\n"]},"metadata":{},"sourceType":"module"}