{"ast":null,"code":"import _slicedToArray from\"/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import\"./GraphVendor.css\";import React,{useEffect,useState}from\"react\";import{faTrash,faPencilAlt}from\"@fortawesome/free-solid-svg-icons\";import{FontAwesomeIcon}from\"@fortawesome/react-fontawesome\";import{useDispatch,useSelector}from\"react-redux\";import{Form,Row,Col,Button,InputGroup}from\"react-bootstrap\";import{useHistory}from\"react-router-dom\";import{Chart,ChartLegend,ChartSeries,ChartSeriesItem,ChartTitle}from\"@progress/kendo-react-charts\";import\"hammerjs\";import{fetchDataByVendor}from\"../../../reducers/DashboardReducer\";import{fetchInsurancePolicyTypes}from\"../../../reducers/InsuranceTypeVendorReducer\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function GraphVendor(){var history=useHistory();var dispatch=useDispatch();var _useSelector=useSelector(function(state){return state.dashboard;}),loading=_useSelector.loading,dataByVendor=_useSelector.dataByVendor;var insuranceTypeVendor=useSelector(function(state){return state.insuranceTypeVendor;});var _useState=useState([]),_useState2=_slicedToArray(_useState,2),dataByVendor1=_useState2[0],setDataByVendor1=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),insuranceTypeId=_useState4[0],setInsuranceTypeId=_useState4[1];useEffect(function(){dispatch(fetchInsurancePolicyTypes());},[]);useEffect(function(){if(!loading&&dataByVendor){setDataByVendor1(dataByVendor);}},[loading,dataByVendor]);var handleChangeInsuranceType=function handleChangeInsuranceType(id){if(id&&id!=\"\"){dispatch(fetchDataByVendor(id));}};return/*#__PURE__*/_jsxs(\"div\",{className:\"col-md-12 p-0 pt-3\",children:[/*#__PURE__*/_jsxs(Chart,{children:[/*#__PURE__*/_jsx(ChartTitle,{text:\"Count of insurance sold, distributed by vendors\"}),/*#__PURE__*/_jsx(ChartLegend,{position:\"bottom\"}),/*#__PURE__*/_jsx(ChartSeries,{children:/*#__PURE__*/_jsx(ChartSeriesItem,{type:\"pie\",data:dataByVendor1,field:\"totalCount\",tooltip:{visible:true},categoryField:\"vendorName\",labels:{visible:true,content:function content(props){return\"\".concat(props.dataItem.vendorName,\" : \").concat(props.dataItem.totalCount);}}})})]}),/*#__PURE__*/_jsx(Form,{children:/*#__PURE__*/_jsxs(Form.Group,{as:Row,controlId:\"exampleForm.ControlSelect1\",children:[/*#__PURE__*/_jsx(Form.Label,{column:true,sm:2,children:\"Insurance Type\"}),/*#__PURE__*/_jsx(Col,{sm:10,className:\"pr-5\",children:/*#__PURE__*/_jsxs(Form.Control,{required:true,as:\"select\",onChange:function onChange(event){return handleChangeInsuranceType(event.target.value);},children:[/*#__PURE__*/_jsx(\"option\",{value:null,children:\"Please select insurance type\"}),insuranceTypeVendor&&insuranceTypeVendor.insuranceType&&insuranceTypeVendor.insuranceType.map(function(item){return/*#__PURE__*/_jsx(\"option\",{value:item.insuranceTypeId,children:item.insuranceTypeName},item.insuranceTypeId);})]})})]})})]});}export default GraphVendor;","map":{"version":3,"sources":["/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/src/Admin/AdminDashboard/GraphVendor/GraphVendor.jsx"],"names":["React","useEffect","useState","faTrash","faPencilAlt","FontAwesomeIcon","useDispatch","useSelector","Form","Row","Col","Button","InputGroup","useHistory","Chart","ChartLegend","ChartSeries","ChartSeriesItem","ChartTitle","fetchDataByVendor","fetchInsurancePolicyTypes","GraphVendor","history","dispatch","state","dashboard","loading","dataByVendor","insuranceTypeVendor","dataByVendor1","setDataByVendor1","insuranceTypeId","setInsuranceTypeId","handleChangeInsuranceType","id","visible","content","props","dataItem","vendorName","totalCount","event","target","value","insuranceType","map","item","insuranceTypeName"],"mappings":"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","sourcesContent":["import \"./GraphVendor.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Row, Col, Button, InputGroup } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Chart,\n  ChartLegend,\n  ChartSeries,\n  ChartSeriesItem,\n  ChartTitle,\n} from \"@progress/kendo-react-charts\";\nimport \"hammerjs\";\n\nimport { fetchDataByVendor } from \"../../../reducers/DashboardReducer\";\nimport { fetchInsurancePolicyTypes } from \"../../../reducers/InsuranceTypeVendorReducer\";\nfunction GraphVendor() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { loading, dataByVendor } = useSelector((state) => state.dashboard);\n  const insuranceTypeVendor = useSelector((state) => state.insuranceTypeVendor);\n  const [dataByVendor1, setDataByVendor1] = useState([]);\n  const [insuranceTypeId, setInsuranceTypeId] = useState(\"\");\n  useEffect(() => {\n    dispatch(fetchInsurancePolicyTypes());\n  }, []);\n\n  useEffect(() => {\n    if (!loading && dataByVendor) {\n      setDataByVendor1(dataByVendor);\n    }\n  }, [loading, dataByVendor]);\n\n  const handleChangeInsuranceType = (id) => {\n    if (id && id != \"\") {\n      dispatch(fetchDataByVendor(id));\n    }\n  };\n\n  return (\n    <div className=\"col-md-12 p-0 pt-3\">\n      <Chart>\n        <ChartTitle text=\"Count of insurance sold, distributed by vendors\" />\n        <ChartLegend position=\"bottom\" />\n        <ChartSeries>\n          <ChartSeriesItem\n            type=\"pie\"\n            data={dataByVendor1}\n            field=\"totalCount\"\n            tooltip={{\n              visible: true\n            }}\n            categoryField=\"vendorName\"\n            labels={{\n              visible: true,\n              content: (props) => {\n                return `${props.dataItem.vendorName} : ${props.dataItem.totalCount}`;\n              },\n            }}\n          />\n        </ChartSeries>\n      </Chart>\n      <Form>\n        <Form.Group as={Row} controlId=\"exampleForm.ControlSelect1\">\n          <Form.Label column sm={2}>\n            Insurance Type\n          </Form.Label>\n          <Col sm={10} className=\"pr-5\">\n            <Form.Control\n              required\n              as=\"select\"\n              onChange={(event) =>\n                handleChangeInsuranceType(event.target.value)\n              }\n            >\n              <option value={null}>Please select insurance type</option>\n              {insuranceTypeVendor &&\n                insuranceTypeVendor.insuranceType &&\n                insuranceTypeVendor.insuranceType.map((item) => (\n                  <option\n                    value={item.insuranceTypeId}\n                    key={item.insuranceTypeId}\n                  >\n                    {item.insuranceTypeName}\n                  </option>\n                ))}\n            </Form.Control>\n          </Col>\n        </Form.Group>\n      </Form>\n    </div>\n  );\n}\n\nexport default GraphVendor;\n"]},"metadata":{},"sourceType":"module"}