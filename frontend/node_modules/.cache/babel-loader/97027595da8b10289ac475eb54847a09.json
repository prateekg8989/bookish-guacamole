{"ast":null,"code":"var _jsxFileName = \"/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/src/Admin/AdminDashboard/GraphInsuranceType/GraphInsuranceType.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./GraphInsuranceType.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport { Chart, ChartLegend, ChartSeries, ChartSeriesItem, ChartTitle } from \"@progress/kendo-react-charts\";\nimport \"hammerjs\";\nimport { fetchDataByInsuranceType } from \"../../../reducers/DashboardReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GraphInsuranceType() {\n  _s();\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const {\n    loading,\n    dataByInsuranceType\n  } = useSelector(state => state.dashboard);\n  const [dataByInsuranceType1, setDataByInsuranceType1] = useState([]);\n  useEffect(() => {\n    dispatch(fetchDataByInsuranceType());\n  }, []);\n  useEffect(() => {\n    if (!loading && dataByInsuranceType) {\n      setDataByInsuranceType1(dataByInsuranceType);\n    }\n  }, [loading, dataByInsuranceType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-3\",\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      children: [/*#__PURE__*/_jsxDEV(ChartTitle, {\n        text: \"Count of insurance sold, distributed by insurance type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartLegend, {\n        position: \"bottom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartSeries, {\n        children: /*#__PURE__*/_jsxDEV(ChartSeriesItem, {\n          type: \"pie\",\n          data: dataByInsuranceType1,\n          field: \"totalCount\",\n          categoryField: \"insuranceTypeName\",\n          labels: {\n            visible: true,\n            content: props => {\n              return `${props.dataItem.insuranceTypeName} : ${props.dataItem.totalCount}`;\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GraphInsuranceType, \"UHFnccokCELozy7tK0FXWlNqgh0=\", false, function () {\n  return [useHistory, useDispatch, useSelector];\n});\n\n_c = GraphInsuranceType;\nexport default GraphInsuranceType;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphInsuranceType\");","map":{"version":3,"sources":["/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/src/Admin/AdminDashboard/GraphInsuranceType/GraphInsuranceType.jsx"],"names":["React","useEffect","useState","faTrash","faPencilAlt","FontAwesomeIcon","useDispatch","useSelector","Button","useHistory","Chart","ChartLegend","ChartSeries","ChartSeriesItem","ChartTitle","fetchDataByInsuranceType","GraphInsuranceType","history","dispatch","loading","dataByInsuranceType","state","dashboard","dataByInsuranceType1","setDataByInsuranceType1","visible","content","props","dataItem","insuranceTypeName","totalCount"],"mappings":";;;AAAA,OAAO,0BAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,mCAArC;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SACEC,KADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,eAJF,EAKEC,UALF,QAMO,8BANP;AAOA,OAAO,UAAP;AAEA,SAASC,wBAAT,QAAyC,oCAAzC;;;AACA,SAASC,kBAAT,GAA8B;AAAA;;AAC5B,QAAMC,OAAO,GAAGR,UAAU,EAA1B;AACA,QAAMS,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAAEa,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAmCb,WAAW,CACjDc,KAAD,IAAWA,KAAK,CAACC,SADiC,CAApD;AAGA,QAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDtB,QAAQ,CAAC,EAAD,CAAhE;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,QAAQ,CAACH,wBAAwB,EAAzB,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACkB,OAAD,IAAYC,mBAAhB,EAAqC;AACnCI,MAAAA,uBAAuB,CAACJ,mBAAD,CAAvB;AACD;AACF,GAJQ,EAIN,CAACD,OAAD,EAAUC,mBAAV,CAJM,CAAT;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE,QAAC,KAAD;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,IAAI,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AAAa,QAAA,QAAQ,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,WAAD;AAAA,+BACE,QAAC,eAAD;AACE,UAAA,IAAI,EAAC,KADP;AAEE,UAAA,IAAI,EAAEG,oBAFR;AAGE,UAAA,KAAK,EAAC,YAHR;AAIE,UAAA,aAAa,EAAC,mBAJhB;AAKE,UAAA,MAAM,EAAE;AACNE,YAAAA,OAAO,EAAE,IADH;AAENC,YAAAA,OAAO,EAAGC,KAAD,IAAW;AAClB,qBAAQ,GAAEA,KAAK,CAACC,QAAN,CAAeC,iBAAkB,MAAKF,KAAK,CAACC,QAAN,CAAeE,UAAW,EAA1E;AACD;AAJK;AALV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GAvCQd,kB;UACSP,U,EACCH,W,EACwBC,W;;;KAHlCS,kB;AAyCT,eAAeA,kBAAf","sourcesContent":["import \"./GraphInsuranceType.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Chart,\n  ChartLegend,\n  ChartSeries,\n  ChartSeriesItem,\n  ChartTitle,\n} from \"@progress/kendo-react-charts\";\nimport \"hammerjs\";\n\nimport { fetchDataByInsuranceType } from \"../../../reducers/DashboardReducer\";\nfunction GraphInsuranceType() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { loading, dataByInsuranceType } = useSelector(\n    (state) => state.dashboard\n  );\n  const [dataByInsuranceType1, setDataByInsuranceType1] = useState([]);\n  useEffect(() => {\n    dispatch(fetchDataByInsuranceType());\n  }, []);\n\n  useEffect(() => {\n    if (!loading && dataByInsuranceType) {\n      setDataByInsuranceType1(dataByInsuranceType);\n    }\n  }, [loading, dataByInsuranceType]);\n\n  return (\n    <div className=\"p-3\">\n      <Chart>\n        <ChartTitle text=\"Count of insurance sold, distributed by insurance type\" />\n        <ChartLegend position=\"bottom\" />\n        <ChartSeries>\n          <ChartSeriesItem\n            type=\"pie\"\n            data={dataByInsuranceType1}\n            field=\"totalCount\"\n            categoryField=\"insuranceTypeName\"\n            labels={{\n              visible: true,\n              content: (props) => {\n                return `${props.dataItem.insuranceTypeName} : ${props.dataItem.totalCount}`;\n              },\n            }}\n          />\n        </ChartSeries>\n      </Chart>\n    </div>\n  );\n}\n\nexport default GraphInsuranceType;\n"]},"metadata":{},"sourceType":"module"}