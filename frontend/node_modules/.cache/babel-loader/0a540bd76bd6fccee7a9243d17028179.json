{"ast":null,"code":"import _defineProperty from\"/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _extraReducers;import{createAsyncThunk,createSlice}from\"@reduxjs/toolkit\";import axios from\"axios\";export var fetchInsurancePolicyTypes=createAsyncThunk(\"insuranceTypeVendor/fetchInsurancePolicyTypes\",/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,obj,_obj,_obj2;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.get(\"https://gjkl2w4at2.execute-api.us-east-2.amazonaws.com/dev/policytypes\");case 3:response=_context.sent;if(!(response.status>299)){_context.next=10;break;}console.log('fetchInsurancePolicyTypes api response:- ',response);obj={status:500,data:response.data};return _context.abrupt(\"return\",obj);case 10:console.log('fetchInsurancePolicyTypes api response:- ',response);_obj={status:200,data:response.data};return _context.abrupt(\"return\",_obj);case 13:_context.next=20;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](0);console.log(_context.t0.response.data);_obj2=_objectSpread({status:500},_context.t0.response.data);return _context.abrupt(\"return\",_obj2);case 20:case\"end\":return _context.stop();}}},_callee,null,[[0,15]]);})));var insuranceTypeVendorSlice=createSlice({name:\"insuranceTypeVendor\",initialState:{loading:false,insuranceType:[]},reducers:{},extraReducers:(_extraReducers={},_defineProperty(_extraReducers,fetchInsurancePolicyTypes.pending,function(state,action){state.loading=true;}),_defineProperty(_extraReducers,fetchInsurancePolicyTypes.fulfilled,function(state,action){state.loading=false;if(action.payload.status==200){console.log(action.payload);state.insuranceType=_toConsumableArray(action.payload.data);}}),_defineProperty(_extraReducers,fetchInsurancePolicyTypes.rejected,function(state,action){state.loading=false;}),_extraReducers)});// export const { setUserDetailsFromSS, logoutTheUser } = insuranceTypeVendorSlice.actions;\nexport default insuranceTypeVendorSlice.reducer;","map":{"version":3,"sources":["/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/src/reducers/InsuranceTypeVendorReducer.js"],"names":["createAsyncThunk","createSlice","axios","fetchInsurancePolicyTypes","get","response","status","console","log","obj","data","insuranceTypeVendorSlice","name","initialState","loading","insuranceType","reducers","extraReducers","pending","state","action","fulfilled","payload","rejected","reducer"],"mappings":"i7BAAA,OAASA,gBAAT,CAA2BC,WAA3B,KAA8C,kBAA9C,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,IAAMC,CAAAA,yBAAyB,CAAGH,gBAAgB,CAAC,+CAAD,sEAAkD,qMAE5EE,CAAAA,KAAK,CAACE,GAAN,0EAF4E,QAE7FC,QAF6F,oBAG/FA,QAAQ,CAACC,MAAT,CAAkB,GAH6E,2BAI/FC,OAAO,CAACC,GAAR,CAAY,2CAAZ,CAAyDH,QAAzD,EACII,GAL2F,CAKrF,CACNH,MAAM,CAAE,GADF,CACOI,IAAI,CAAEL,QAAQ,CAACK,IADtB,CALqF,iCAQxFD,GARwF,UAU/FF,OAAO,CAACC,GAAR,CAAY,2CAAZ,CAAyDH,QAAzD,EACII,IAX2F,CAWrF,CACNH,MAAM,CAAE,GADF,CACOI,IAAI,CAAEL,QAAQ,CAACK,IADtB,CAXqF,iCAcxFD,IAdwF,2FAmBnGF,OAAO,CAACC,GAAR,CAAY,YAAIH,QAAJ,CAAaK,IAAzB,EACID,KApB+F,gBAqB/FH,MAAM,CAAE,GArBuF,EAqB/E,YAAID,QAAJ,CAAaK,IArBkE,kCAuB5FD,KAvB4F,uEAAlD,GAAlD,CA8BP,GAAME,CAAAA,wBAAwB,CAAGV,WAAW,CAAC,CACzCW,IAAI,CAAE,qBADmC,CAEzCC,YAAY,CAAE,CACVC,OAAO,CAAE,KADC,CAEVC,aAAa,CAAE,EAFL,CAF2B,CAMzCC,QAAQ,CAAE,EAN+B,CAQzCC,aAAa,mDACRd,yBAAyB,CAACe,OADlB,CAC4B,SAACC,KAAD,CAAQC,MAAR,CAAmB,CACpDD,KAAK,CAACL,OAAN,CAAgB,IAAhB,CACH,CAHQ,iCAIRX,yBAAyB,CAACkB,SAJlB,CAI8B,SAACF,KAAD,CAAQC,MAAR,CAAmB,CACtDD,KAAK,CAACL,OAAN,CAAgB,KAAhB,CACA,GAAIM,MAAM,CAACE,OAAP,CAAehB,MAAf,EAAyB,GAA7B,CAAkC,CAC9BC,OAAO,CAACC,GAAR,CAAYY,MAAM,CAACE,OAAnB,EACAH,KAAK,CAACJ,aAAN,oBAA0BK,MAAM,CAACE,OAAP,CAAeZ,IAAzC,EACH,CAEJ,CAXQ,iCAYRP,yBAAyB,CAACoB,QAZlB,CAY6B,SAACJ,KAAD,CAAQC,MAAR,CAAmB,CACrDD,KAAK,CAACL,OAAN,CAAgB,KAAhB,CACH,CAdQ,iBAR4B,CAAD,CAA5C,CA0BA;AAEA,cAAeH,CAAAA,wBAAwB,CAACa,OAAxC","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const fetchInsurancePolicyTypes = createAsyncThunk(\"insuranceTypeVendor/fetchInsurancePolicyTypes\", async () => {\n    try {\n        const response = await axios.get(`https://gjkl2w4at2.execute-api.us-east-2.amazonaws.com/dev/policytypes`);\n        if (response.status > 299) {\n            console.log('fetchInsurancePolicyTypes api response:- ', response)\n            let obj = {\n                status: 500, data: response.data\n            }\n            return obj;\n        } else {\n            console.log('fetchInsurancePolicyTypes api response:- ', response)\n            let obj = {\n                status: 200, data: response.data\n            }\n            return obj;\n        }\n\n\n    } catch (err) {\n        console.log(err.response.data);\n        let obj = {\n            status: 500, ...err.response.data\n        }\n        return obj;\n    }\n});\n\n\n\n\nconst insuranceTypeVendorSlice = createSlice({\n    name: \"insuranceTypeVendor\",\n    initialState: {\n        loading: false,\n        insuranceType: [],\n    },\n    reducers: {\n    },\n    extraReducers: {\n        [fetchInsurancePolicyTypes.pending]: (state, action) => {\n            state.loading = true;\n        },\n        [fetchInsurancePolicyTypes.fulfilled]: (state, action) => {\n            state.loading = false;\n            if (action.payload.status == 200) {\n                console.log(action.payload);\n                state.insuranceType = [...action.payload.data];\n            }\n\n        },\n        [fetchInsurancePolicyTypes.rejected]: (state, action) => {\n            state.loading = false;\n        },\n    },\n});\n\n// export const { setUserDetailsFromSS, logoutTheUser } = insuranceTypeVendorSlice.actions;\n\nexport default insuranceTypeVendorSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}