{"ast":null,"code":"import _slicedToArray from\"/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import\"./GraphAgent.css\";import React,{useEffect,useState}from\"react\";import{faTrash,faPencilAlt}from\"@fortawesome/free-solid-svg-icons\";import{FontAwesomeIcon}from\"@fortawesome/react-fontawesome\";import{useDispatch,useSelector}from\"react-redux\";import{Form,Row,Col,Button,InputGroup}from\"react-bootstrap\";import{useHistory}from\"react-router-dom\";import{Chart,ChartLegend,ChartSeries,ChartSeriesItem,ChartTitle}from\"@progress/kendo-react-charts\";import\"hammerjs\";import{fetchDataForAgents}from\"../../../reducers/DashboardReducer\";import{fetchInsurancePolicyTypes}from\"../../../reducers/InsuranceTypeVendorReducer\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function GraphAgent(){var history=useHistory();var dispatch=useDispatch();var _useSelector=useSelector(function(state){return state.dashboard;}),loading=_useSelector.loading,dataByAgent=_useSelector.dataByAgent;var insuranceTypeVendor=useSelector(function(state){return state.insuranceTypeVendor;});var _useState=useState([]),_useState2=_slicedToArray(_useState,2),dataByAgent1=_useState2[0],setDataByAgent1=_useState2[1];var _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),insuranceType=_useState4[0],setInsuranceType=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),vendorId=_useState6[0],setVendorId=_useState6[1];useEffect(function(){dispatch(fetchInsurancePolicyTypes());},[]);useEffect(function(){if(!loading&&dataByAgent){setDataByAgent1(dataByAgent);}},[loading,dataByAgent]);var handleChangeInsuranceType=function handleChangeInsuranceType(data){if(data==\"null\"){dispatch(fetchDataForAgents(null));}else{var insuranceTypeObj=JSON.parse(data);if(insuranceTypeObj&&insuranceTypeObj.insuranceTypeId!=\"\"){var obj={insuranceTypeId:insuranceTypeObj.insuranceTypeId};setInsuranceType(insuranceTypeObj);dispatch(fetchDataForAgents(obj));}}};var handleChangeVendor=function handleChangeVendor(id){if(id&&id!=\"\"){var obj={insuranceTypeId:insuranceType.insuranceTypeId,vendorId:id};setVendorId(id);dispatch(fetchDataForAgents(obj));}};return/*#__PURE__*/_jsxs(\"div\",{className:\"col-md-12 d-flex m-0 p-0\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-md-6\",children:/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsxs(Form.Group,{as:Row,controlId:\"exampleForm.ControlSelect1\",children:[/*#__PURE__*/_jsx(Form.Label,{column:true,sm:2,children:\"Insurance Type\"}),/*#__PURE__*/_jsx(Col,{sm:10,className:\"pr-5\",children:/*#__PURE__*/_jsxs(Form.Control,{required:true,as:\"select\",onChange:function onChange(event){return handleChangeInsuranceType(event.target.value);},children:[/*#__PURE__*/_jsx(\"option\",{value:\"null\",children:\"Please select insurance type\"}),insuranceTypeVendor&&insuranceTypeVendor.insuranceType&&insuranceTypeVendor.insuranceType.map(function(item){return/*#__PURE__*/_jsx(\"option\",{value:JSON.stringify(item),children:item.insuranceTypeName},item.insuranceTypeId);})]})})]}),/*#__PURE__*/_jsxs(Form.Group,{as:Row,controlId:\"exampleForm.ControlSelect2\",children:[/*#__PURE__*/_jsx(Form.Label,{column:true,sm:2,children:\"Vendor\"}),/*#__PURE__*/_jsx(Col,{sm:10,className:\"pr-5\",children:/*#__PURE__*/_jsxs(Form.Control,{required:true,as:\"select\",onChange:function onChange(event){return handleChangeVendor(event.target.value);},children:[/*#__PURE__*/_jsx(\"option\",{value:null,children:\"Please select insurance type\"}),insuranceType&&insuranceType.listOfVendors&&insuranceType.listOfVendors.map(function(item){return/*#__PURE__*/_jsx(\"option\",{value:item.vendorId,children:item.vendorName},item.vendorId);})]})})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-6\",children:/*#__PURE__*/_jsxs(Chart,{children:[/*#__PURE__*/_jsx(ChartTitle,{text:\"Count of insurance sold, distributed by agents \"}),/*#__PURE__*/_jsx(ChartLegend,{position:\"bottom\"}),/*#__PURE__*/_jsx(ChartSeries,{children:/*#__PURE__*/_jsx(ChartSeriesItem,{type:\"pie\",data:dataByAgent1,field:\"totalCount\",categoryField:\"agentName\",labels:{visible:true,content:function content(props){return\"Count : \".concat(props.dataItem.totalCount);}}})})]})})]});}export default GraphAgent;","map":{"version":3,"sources":["/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/src/Admin/AdminDashboard/GraphAgent/GraphAgent.jsx"],"names":["React","useEffect","useState","faTrash","faPencilAlt","FontAwesomeIcon","useDispatch","useSelector","Form","Row","Col","Button","InputGroup","useHistory","Chart","ChartLegend","ChartSeries","ChartSeriesItem","ChartTitle","fetchDataForAgents","fetchInsurancePolicyTypes","GraphAgent","history","dispatch","state","dashboard","loading","dataByAgent","insuranceTypeVendor","dataByAgent1","setDataByAgent1","insuranceType","setInsuranceType","vendorId","setVendorId","handleChangeInsuranceType","data","insuranceTypeObj","JSON","parse","insuranceTypeId","obj","handleChangeVendor","id","event","target","value","map","item","stringify","insuranceTypeName","listOfVendors","vendorName","visible","content","props","dataItem","totalCount"],"mappings":"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","sourcesContent":["import \"./GraphAgent.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Row, Col, Button, InputGroup } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Chart,\n  ChartLegend,\n  ChartSeries,\n  ChartSeriesItem,\n  ChartTitle,\n} from \"@progress/kendo-react-charts\";\nimport \"hammerjs\";\n\nimport { fetchDataForAgents } from \"../../../reducers/DashboardReducer\";\nimport { fetchInsurancePolicyTypes } from \"../../../reducers/InsuranceTypeVendorReducer\";\nfunction GraphAgent() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { loading, dataByAgent } = useSelector((state) => state.dashboard);\n  const insuranceTypeVendor = useSelector((state) => state.insuranceTypeVendor);\n  const [dataByAgent1, setDataByAgent1] = useState([]);\n  const [insuranceType, setInsuranceType] = useState({});\n  const [vendorId, setVendorId] = useState(\"\");\n  useEffect(() => {\n    dispatch(fetchInsurancePolicyTypes());\n  }, []);\n\n  useEffect(() => {\n    if (!loading && dataByAgent) {\n      setDataByAgent1(dataByAgent);\n    }\n  }, [loading, dataByAgent]);\n\n  const handleChangeInsuranceType = (data) => {\n    if (data == \"null\") {\n      dispatch(fetchDataForAgents(null));\n    } else {\n      let insuranceTypeObj = JSON.parse(data);\n      if (insuranceTypeObj && insuranceTypeObj.insuranceTypeId != \"\") {\n        let obj = { insuranceTypeId: insuranceTypeObj.insuranceTypeId };\n        setInsuranceType(insuranceTypeObj);\n        dispatch(fetchDataForAgents(obj));\n      }\n    }\n  };\n\n  const handleChangeVendor = (id) => {\n    if (id && id != \"\") {\n      let obj = {\n        insuranceTypeId: insuranceType.insuranceTypeId,\n        vendorId: id,\n      };\n      setVendorId(id);\n      dispatch(fetchDataForAgents(obj));\n    }\n  };\n\n  return (\n    <div className=\"col-md-12 d-flex m-0 p-0\">\n      <div className=\"col-md-6\">\n        <Form>\n          <Form.Group as={Row} controlId=\"exampleForm.ControlSelect1\">\n            <Form.Label column sm={2}>\n              Insurance Type\n            </Form.Label>\n            <Col sm={10} className=\"pr-5\">\n              <Form.Control\n                required\n                as=\"select\"\n                onChange={(event) =>\n                  handleChangeInsuranceType(event.target.value)\n                }\n              >\n                <option value={\"null\"}>Please select insurance type</option>\n                {insuranceTypeVendor &&\n                  insuranceTypeVendor.insuranceType &&\n                  insuranceTypeVendor.insuranceType.map((item) => (\n                    <option\n                      value={JSON.stringify(item)}\n                      key={item.insuranceTypeId}\n                    >\n                      {item.insuranceTypeName}\n                    </option>\n                  ))}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"exampleForm.ControlSelect2\">\n            <Form.Label column sm={2}>\n              Vendor\n            </Form.Label>\n            <Col sm={10} className=\"pr-5\">\n              <Form.Control\n                required\n                as=\"select\"\n                onChange={(event) => handleChangeVendor(event.target.value)}\n              >\n                <option value={null}>Please select insurance type</option>\n                {insuranceType &&\n                  insuranceType.listOfVendors &&\n                  insuranceType.listOfVendors.map((item) => (\n                    <option value={item.vendorId} key={item.vendorId}>\n                      {item.vendorName}\n                    </option>\n                  ))}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n        </Form>\n      </div>\n      <div className=\"col-md-6\">\n        <Chart>\n          <ChartTitle text=\"Count of insurance sold, distributed by agents \" />\n          <ChartLegend position=\"bottom\" />\n          <ChartSeries>\n            <ChartSeriesItem\n              type=\"pie\"\n              data={dataByAgent1}\n              field=\"totalCount\"\n              categoryField=\"agentName\"\n              labels={{\n                visible: true,\n                content: (props) => {\n                  return `Count : ${props.dataItem.totalCount}`;\n                },\n              }}\n            />\n          </ChartSeries>\n        </Chart>\n      </div>\n    </div>\n  );\n}\n\nexport default GraphAgent;\n"]},"metadata":{},"sourceType":"module"}