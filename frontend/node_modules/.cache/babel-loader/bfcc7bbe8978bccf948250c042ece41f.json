{"ast":null,"code":"var _jsxFileName = \"/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/src/Account.js\";\nimport React, { createContext } from 'react';\nimport { CognitoUser, AuthenticationDetails } from 'amazon-cognito-identity-js';\nimport Pool from \"./UserPool\";\nimport store from \"./store\";\nimport { changeLoginState } from \"./reducers/CommonReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AccountContext = /*#__PURE__*/createContext();\nexport const Account = props => {\n  const getSession = async () => {\n    return await new Promise((resolve, reject) => {\n      const user = Pool.getCurrentUser();\n\n      if (user) {\n        user.getSession((err, session) => {\n          if (err) {\n            reject();\n          } else {\n            resolve(session);\n          }\n        });\n      } else {\n        reject();\n      }\n    });\n  };\n\n  const authenticate = async (Username, Password) => {\n    return await new Promise((resolve, reject) => {\n      const user = new CognitoUser({\n        Username,\n        Pool\n      });\n      const authDetails = new AuthenticationDetails({\n        Username,\n        Password\n      });\n      user.authenticateUser(authDetails, {\n        onSuccess: data => {\n          console.log('Login Success ', data);\n          resolve(data);\n        },\n        onFailure: err => {\n          console.log('Login Failure ', err);\n          reject(err);\n        },\n        newPasswordRequired: data => {\n          console.log('newPasswordRequired ', data);\n          resolve(data);\n        }\n      });\n    });\n  };\n\n  const logout = () => {\n    const user = Pool.getCurrentUser();\n\n    if (user) {\n      user.signOut();\n      store.dispatch(changeLoginState(false));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AccountContext.Provider, {\n    value: {\n      authenticate,\n      getSession,\n      logout\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_c = Account;\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"sources":["/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/src/Account.js"],"names":["React","createContext","CognitoUser","AuthenticationDetails","Pool","store","changeLoginState","AccountContext","Account","props","getSession","Promise","resolve","reject","user","getCurrentUser","err","session","authenticate","Username","Password","authDetails","authenticateUser","onSuccess","data","console","log","onFailure","newPasswordRequired","logout","signOut","dispatch","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,WAAT,EAAsBC,qBAAtB,QAAmD,4BAAnD;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SACIC,gBADJ,QAES,0BAFT;;AAGA,OAAO,MAAMC,cAAc,gBAAGN,aAAa,EAApC;AAEP,OAAO,MAAMO,OAAO,GAAIC,KAAD,IAAW;AAE9B,QAAMC,UAAU,GAAG,YAAY;AAC3B,WAAO,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1C,YAAMC,IAAI,GAAGV,IAAI,CAACW,cAAL,EAAb;;AACA,UAAID,IAAJ,EAAU;AACNA,QAAAA,IAAI,CAACJ,UAAL,CAAgB,CAACM,GAAD,EAAMC,OAAN,KAAkB;AAC9B,cAAID,GAAJ,EAAS;AACLH,YAAAA,MAAM;AACT,WAFD,MAEO;AACHD,YAAAA,OAAO,CAACK,OAAD,CAAP;AACH;AACJ,SAND;AAOH,OARD,MAQO;AACHJ,QAAAA,MAAM;AACT;AACJ,KAbY,CAAb;AAcH,GAfD;;AAiBA,QAAMK,YAAY,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC/C,WAAO,MAAM,IAAIT,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1C,YAAMC,IAAI,GAAG,IAAIZ,WAAJ,CAAgB;AACzBiB,QAAAA,QADyB;AAEzBf,QAAAA;AAFyB,OAAhB,CAAb;AAIA,YAAMiB,WAAW,GAAG,IAAIlB,qBAAJ,CAA0B;AAC1CgB,QAAAA,QAD0C;AAChCC,QAAAA;AADgC,OAA1B,CAApB;AAIAN,MAAAA,IAAI,CAACQ,gBAAL,CAAsBD,WAAtB,EAAmC;AAC/BE,QAAAA,SAAS,EAAGC,IAAD,IAAU;AACjBC,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,IAA9B;AACAZ,UAAAA,OAAO,CAACY,IAAD,CAAP;AACH,SAJ8B;AAK/BG,QAAAA,SAAS,EAAGX,GAAD,IAAS;AAChBS,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BV,GAA9B;AACAH,UAAAA,MAAM,CAACG,GAAD,CAAN;AACH,SAR8B;AAS/BY,QAAAA,mBAAmB,EAAGJ,IAAD,IAAU;AAC3BC,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,IAApC;AACAZ,UAAAA,OAAO,CAACY,IAAD,CAAP;AACH;AAZ8B,OAAnC;AAcH,KAvBY,CAAb;AAwBH,GAzBD;;AA2BA,QAAMK,MAAM,GAAG,MAAM;AACjB,UAAMf,IAAI,GAAGV,IAAI,CAACW,cAAL,EAAb;;AACA,QAAID,IAAJ,EAAU;AACNA,MAAAA,IAAI,CAACgB,OAAL;AACAzB,MAAAA,KAAK,CAAC0B,QAAN,CAAezB,gBAAgB,CAAC,KAAD,CAA/B;AACH;AACJ,GAND;;AAQA,sBACI,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEY,MAAAA,YAAF;AAAgBR,MAAAA,UAAhB;AAA4BmB,MAAAA;AAA5B,KAAhC;AAAA,cACKpB,KAAK,CAACuB;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA3DM;KAAMxB,O","sourcesContent":["import React, { createContext } from 'react';\nimport { CognitoUser, AuthenticationDetails } from 'amazon-cognito-identity-js';\nimport Pool from \"./UserPool\";\nimport store from \"./store\";\nimport {\n    changeLoginState\n  } from \"./reducers/CommonReducer\";\nexport const AccountContext = createContext();\n\nexport const Account = (props) => {\n\n    const getSession = async () => {\n        return await new Promise((resolve, reject) => {\n            const user = Pool.getCurrentUser();\n            if (user) {\n                user.getSession((err, session) => {\n                    if (err) {\n                        reject();\n                    } else {\n                        resolve(session);\n                    }\n                })\n            } else {\n                reject();\n            }\n        })\n    }\n\n    const authenticate = async (Username, Password) => {\n        return await new Promise((resolve, reject) => {\n            const user = new CognitoUser({\n                Username,\n                Pool\n            });\n            const authDetails = new AuthenticationDetails({\n                Username, Password\n            });\n\n            user.authenticateUser(authDetails, {\n                onSuccess: (data) => {\n                    console.log('Login Success ', data);\n                    resolve(data);\n                },\n                onFailure: (err) => {\n                    console.log('Login Failure ', err);\n                    reject(err);\n                },\n                newPasswordRequired: (data) => {\n                    console.log('newPasswordRequired ', data);\n                    resolve(data);\n                }\n            })\n        })\n    }\n\n    const logout = () => {\n        const user = Pool.getCurrentUser();\n        if (user) {\n            user.signOut();\n            store.dispatch(changeLoginState(false));\n        }\n    }\n\n    return (\n        <AccountContext.Provider value={{ authenticate, getSession, logout }}>\n            {props.children}\n        </AccountContext.Provider>\n    )\n};"]},"metadata":{},"sourceType":"module"}