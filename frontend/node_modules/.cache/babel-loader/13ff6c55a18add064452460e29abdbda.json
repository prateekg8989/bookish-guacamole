{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const fetchDataByInsuranceType = createAsyncThunk(\"dashboard/fetchDataByInsuranceType\", async () => {\n  try {\n    const response = await axios.get(`https://gjkl2w4at2.execute-api.us-east-2.amazonaws.com/dev/stats/insurance-type`);\n\n    if (response.status > 299) {\n      console.log('fetchDataByInsuranceType api response:- ', response);\n      let obj = {\n        status: 500,\n        data: response.data\n      };\n      return obj;\n    } else {\n      console.log('fetchDataByInsuranceType api response:- ', response);\n      let obj = {\n        status: 200,\n        data: response.data\n      };\n      return obj;\n    }\n  } catch (err) {\n    console.log(err.response.data);\n    let obj = {\n      status: 500,\n      ...err.response.data\n    };\n    return obj;\n  }\n});\nconst dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState: {\n    loading: false,\n    dataByInsuranceType: [],\n    dataByVendor: [],\n    dataByAgent: []\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchDataByInsuranceType.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchDataByInsuranceType.fulfilled]: (state, action) => {\n      state.loading = false;\n\n      if (action.payload.status == 200) {\n        console.log(action.payload);\n        state.dataByInsuranceType = [...action.payload.data];\n      }\n    },\n    [fetchDataByInsuranceType.rejected]: (state, action) => {\n      state.loading = false;\n    }\n  }\n}); // export const { setUserDetailsFromSS, logoutTheUser } = dashboardSlice.actions;\n\nexport default dashboardSlice.reducer;","map":{"version":3,"sources":["/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/src/reducers/DashboardReducer.js"],"names":["createAsyncThunk","createSlice","axios","fetchDataByInsuranceType","response","get","status","console","log","obj","data","err","dashboardSlice","name","initialState","loading","dataByInsuranceType","dataByVendor","dataByAgent","reducers","extraReducers","pending","state","action","fulfilled","payload","rejected","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,wBAAwB,GAAGH,gBAAgB,CAAC,oCAAD,EAAuC,YAAY;AACvG,MAAI;AACA,UAAMI,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAN,CAAW,iFAAX,CAAvB;;AACA,QAAID,QAAQ,CAACE,MAAT,GAAkB,GAAtB,EAA2B;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwDJ,QAAxD;AACA,UAAIK,GAAG,GAAG;AACNH,QAAAA,MAAM,EAAE,GADF;AACOI,QAAAA,IAAI,EAAEN,QAAQ,CAACM;AADtB,OAAV;AAGA,aAAOD,GAAP;AACH,KAND,MAMO;AACHF,MAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwDJ,QAAxD;AACA,UAAIK,GAAG,GAAG;AACNH,QAAAA,MAAM,EAAE,GADF;AACOI,QAAAA,IAAI,EAAEN,QAAQ,CAACM;AADtB,OAAV;AAGA,aAAOD,GAAP;AACH;AAGJ,GAjBD,CAiBE,OAAOE,GAAP,EAAY;AACVJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,GAAG,CAACP,QAAJ,CAAaM,IAAzB;AACA,QAAID,GAAG,GAAG;AACNH,MAAAA,MAAM,EAAE,GADF;AACO,SAAGK,GAAG,CAACP,QAAJ,CAAaM;AADvB,KAAV;AAGA,WAAOD,GAAP;AACH;AACJ,CAzBuD,CAAjD;AA8BP,MAAMG,cAAc,GAAGX,WAAW,CAAC;AAC/BY,EAAAA,IAAI,EAAE,WADyB;AAE/BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,OAAO,EAAE,KADC;AAEVC,IAAAA,mBAAmB,EAAE,EAFX;AAGVC,IAAAA,YAAY,EAAE,EAHJ;AAIVC,IAAAA,WAAW,EAAE;AAJH,GAFiB;AAQ/BC,EAAAA,QAAQ,EAAE,EARqB;AAU/BC,EAAAA,aAAa,EAAE;AACX,KAACjB,wBAAwB,CAACkB,OAA1B,GAAoC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnDD,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACH,KAHU;AAIX,KAACZ,wBAAwB,CAACqB,SAA1B,GAAsC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACrDD,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;;AACA,UAAIQ,MAAM,CAACE,OAAP,CAAenB,MAAf,IAAyB,GAA7B,EAAkC;AAC9BC,QAAAA,OAAO,CAACC,GAAR,CAAYe,MAAM,CAACE,OAAnB;AACAH,QAAAA,KAAK,CAACN,mBAAN,GAA4B,CAAC,GAAGO,MAAM,CAACE,OAAP,CAAef,IAAnB,CAA5B;AACH;AAEJ,KAXU;AAYX,KAACP,wBAAwB,CAACuB,QAA1B,GAAqC,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACpDD,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACH;AAdU;AAVgB,CAAD,CAAlC,C,CA4BA;;AAEA,eAAeH,cAAc,CAACe,OAA9B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const fetchDataByInsuranceType = createAsyncThunk(\"dashboard/fetchDataByInsuranceType\", async () => {\n    try {\n        const response = await axios.get(`https://gjkl2w4at2.execute-api.us-east-2.amazonaws.com/dev/stats/insurance-type`);\n        if (response.status > 299) {\n            console.log('fetchDataByInsuranceType api response:- ', response)\n            let obj = {\n                status: 500, data: response.data\n            }\n            return obj;\n        } else {\n            console.log('fetchDataByInsuranceType api response:- ', response)\n            let obj = {\n                status: 200, data: response.data\n            }\n            return obj;\n        }\n\n\n    } catch (err) {\n        console.log(err.response.data);\n        let obj = {\n            status: 500, ...err.response.data\n        }\n        return obj;\n    }\n});\n\n\n\n\nconst dashboardSlice = createSlice({\n    name: \"dashboard\",\n    initialState: {\n        loading: false,\n        dataByInsuranceType: [],\n        dataByVendor: [],\n        dataByAgent: [],\n    },\n    reducers: {\n    },\n    extraReducers: {\n        [fetchDataByInsuranceType.pending]: (state, action) => {\n            state.loading = true;\n        },\n        [fetchDataByInsuranceType.fulfilled]: (state, action) => {\n            state.loading = false;\n            if (action.payload.status == 200) {\n                console.log(action.payload);\n                state.dataByInsuranceType = [...action.payload.data];\n            }\n\n        },\n        [fetchDataByInsuranceType.rejected]: (state, action) => {\n            state.loading = false;\n        },\n    },\n});\n\n// export const { setUserDetailsFromSS, logoutTheUser } = dashboardSlice.actions;\n\nexport default dashboardSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}