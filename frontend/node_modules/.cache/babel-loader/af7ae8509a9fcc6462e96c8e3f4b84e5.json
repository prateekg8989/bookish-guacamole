{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { canUseDOM, Draggable } from '@progress/kendo-react-common';\nimport { closestTagName, getColumnIndex, getRowIndex } from './utils';\n\nvar hasRelativeStackingContext = function () {\n  if (!canUseDOM || !document.body) {\n    return false;\n  }\n\n  var top = 10;\n  var parent = document.createElement('div');\n  parent.style.transform = 'matrix(10, 0, 0, 10, 0, 0)';\n  parent.innerHTML = \"<div style=\\\"position: fixed; top: \" + top + \"px;\\\">child</div>\";\n  document.body.appendChild(parent);\n  var isDifferent = parent.children[0].getBoundingClientRect().top !== top;\n  document.body.removeChild(parent);\n  return isDifferent;\n};\n\nvar HAS_RELATIVE_STACKING_CONTEXT = hasRelativeStackingContext();\n\nvar relativeContextElement = function (element) {\n  if (!element || !HAS_RELATIVE_STACKING_CONTEXT) {\n    return null;\n  }\n\n  var node = element.parentElement;\n\n  while (node) {\n    if (window.getComputedStyle(node).transform !== 'none') {\n      return node;\n    }\n\n    node = node.parentElement;\n  }\n};\n\nvar getOffset = function (offsetParent) {\n  if (offsetParent && offsetParent.ownerDocument) {\n    if (offsetParent !== offsetParent.ownerDocument.body) {\n      var rect = offsetParent.getBoundingClientRect();\n      return {\n        left: rect.left - offsetParent.scrollLeft,\n        top: rect.top - offsetParent.scrollTop\n      };\n    }\n  }\n\n  return {\n    left: 0,\n    top: 0\n  };\n};\n/** @hidden */\n\n\nexport var getSelectionOptions = function (selectable) {\n  var enabled = selectable ? typeof selectable.enabled === 'boolean' ? selectable.enabled : true : false;\n  var drag = selectable ? Boolean(selectable.drag) : false;\n  var mode = selectable && selectable.mode ? selectable.mode : 'multiple';\n  var cell = Boolean(selectable && selectable.cell);\n  return {\n    enabled: enabled,\n    drag: drag,\n    mode: mode,\n    cell: cell\n  };\n};\n/** @hidden */\n\nexport var GridSelection = function (props) {\n  var onRelease = props.onRelease;\n\n  var _a = getSelectionOptions(props.selectable),\n      selectionEnabled = _a.enabled,\n      selectionDrag = _a.drag,\n      selectionMode = _a.mode,\n      selectionCell = _a.cell;\n\n  var draggableRef = React.useRef(null);\n  var overlayElementRef = React.useRef(null);\n  var dragStartRef = React.useRef({\n    clientX: 0,\n    clientY: 0\n  });\n\n  var _b = React.useState(null),\n      overlaySettings = _b[0],\n      setOverlaySettings = _b[1];\n\n  var offsetParentRef = React.useRef();\n  var isDraggedRef = React.useRef(false);\n  var onPressHandler = React.useCallback(function (eventData) {\n    var event = eventData.event;\n\n    if (!draggableRef.current) {\n      return;\n    }\n\n    offsetParentRef.current = relativeContextElement(draggableRef.current.element);\n    dragStartRef.current = {\n      clientY: event.clientY,\n      clientX: event.clientX\n    };\n  }, []);\n  var onDragHandler = React.useCallback(function (eventData) {\n    var event = eventData.event;\n    var _a = dragStartRef.current,\n        clientX = _a.clientX,\n        clientY = _a.clientY;\n\n    if (!selectionDrag || selectionMode === 'single') {\n      return;\n    }\n\n    if (Math.abs(clientY - event.clientY) > 5 || Math.abs(clientX - event.clientX) > 5) {\n      isDraggedRef.current = true;\n    }\n\n    if (isDraggedRef.current) {\n      var offset = getOffset(offsetParentRef.current);\n      setOverlaySettings({\n        top: Math.min(clientY, event.clientY) - offset.top,\n        left: Math.min(clientX, event.clientX) - offset.left,\n        width: Math.abs(event.clientX - clientX),\n        height: Math.abs(event.clientY - clientY)\n      });\n    }\n  }, [setOverlaySettings, selectionDrag, selectionMode]);\n  var onReleaseHandler = React.useCallback(function (eventData) {\n    var event = eventData.event;\n    var _a = dragStartRef.current,\n        clientX = _a.clientX,\n        clientY = _a.clientY;\n\n    if (!isDraggedRef.current) {\n      var startElement = document.elementFromPoint(clientX, clientY);\n\n      if (!startElement) {\n        return;\n      }\n\n      var tdElement = closestTagName(startElement, 'TD');\n      var trElement = closestTagName(startElement, 'TR');\n      var colIndex = getColumnIndex(tdElement);\n      var rowIndex = getRowIndex(trElement);\n\n      if (tdElement && trElement && rowIndex !== undefined && colIndex !== undefined) {\n        onRelease({\n          nativeEvent: event.originalEvent,\n          startRowIndex: rowIndex,\n          startColIndex: colIndex,\n          endRowIndex: rowIndex,\n          endColIndex: colIndex,\n          altKey: event.altKey,\n          shiftKey: event.shiftKey,\n          ctrlKey: event.ctrlKey,\n          metaKey: event.originalEvent.metaKey,\n          mode: selectionMode,\n          cell: selectionCell,\n          isDrag: false\n        });\n      }\n    } else {\n      var top_1 = Math.min(clientY, event.clientY);\n      var left = Math.min(clientX, event.clientX);\n      var bottom = Math.max(clientY, event.clientY);\n      var right = Math.max(clientX, event.clientX);\n      var overlayElement = overlayElementRef.current;\n\n      if (!overlayElement) {\n        return;\n      }\n\n      overlayElement.style.visibility = 'hidden';\n      var startElement = document.elementFromPoint(left, top_1);\n      var endElement = document.elementFromPoint(right, bottom);\n      overlayElement.style.visibility = '';\n\n      if (!startElement || !endElement) {\n        return;\n      }\n\n      var startTdElement = closestTagName(startElement, 'TD');\n      var startTrElement = closestTagName(startTdElement, 'TR');\n      var endTdElement = closestTagName(endElement, 'TD');\n      var endTrElement = closestTagName(endTdElement, 'TR');\n      var startColIndex = getColumnIndex(startTdElement);\n      var startRowIndex = getRowIndex(startTrElement);\n      var endColIndex = getColumnIndex(endTdElement);\n      var endRowIndex = getRowIndex(endTrElement);\n\n      if (startColIndex !== undefined && startRowIndex !== undefined && endColIndex !== undefined && endRowIndex !== undefined) {\n        onRelease({\n          nativeEvent: event.originalEvent,\n          startRowIndex: startRowIndex,\n          startColIndex: startColIndex,\n          endRowIndex: endRowIndex,\n          endColIndex: endColIndex,\n          altKey: event.altKey,\n          shiftKey: event.shiftKey,\n          ctrlKey: event.ctrlKey,\n          metaKey: event.originalEvent.metaKey,\n          mode: selectionMode,\n          cell: selectionCell,\n          isDrag: true\n        });\n      }\n    }\n\n    setOverlaySettings(null);\n    isDraggedRef.current = false;\n    dragStartRef.current = {\n      clientX: 0,\n      clientY: 0\n    };\n  }, [setOverlaySettings, selectionMode, selectionCell, onRelease]);\n\n  if (!selectionEnabled) {\n    return props.children;\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Draggable, {\n    onPress: onPressHandler,\n    onDrag: onDragHandler,\n    onRelease: onReleaseHandler,\n    ref: draggableRef\n  }, props.children), overlaySettings && React.createElement(\"div\", {\n    ref: overlayElementRef,\n    style: __assign({}, overlaySettings, {\n      position: 'fixed'\n    }),\n    className: 'k-marquee-color'\n  }));\n};","map":{"version":3,"sources":["../../../src/selection/GridSelection.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { canUseDOM, Draggable } from '@progress/kendo-react-common';\nimport { closestTagName, getColumnIndex, getRowIndex } from './utils';\nvar hasRelativeStackingContext = function () {\n    if (!canUseDOM || !document.body) {\n        return false;\n    }\n    var top = 10;\n    var parent = document.createElement('div');\n    parent.style.transform = 'matrix(10, 0, 0, 10, 0, 0)';\n    parent.innerHTML = \"<div style=\\\"position: fixed; top: \" + top + \"px;\\\">child</div>\";\n    document.body.appendChild(parent);\n    var isDifferent = parent.children[0].getBoundingClientRect().top !== top;\n    document.body.removeChild(parent);\n    return isDifferent;\n};\nvar HAS_RELATIVE_STACKING_CONTEXT = hasRelativeStackingContext();\nvar relativeContextElement = function (element) {\n    if (!element || !HAS_RELATIVE_STACKING_CONTEXT) {\n        return null;\n    }\n    var node = element.parentElement;\n    while (node) {\n        if (window.getComputedStyle(node).transform !== 'none') {\n            return node;\n        }\n        node = node.parentElement;\n    }\n};\nvar getOffset = function (offsetParent) {\n    if (offsetParent && offsetParent.ownerDocument) {\n        if (offsetParent !== offsetParent.ownerDocument.body) {\n            var rect = offsetParent.getBoundingClientRect();\n            return {\n                left: rect.left - offsetParent.scrollLeft,\n                top: rect.top - offsetParent.scrollTop\n            };\n        }\n    }\n    return { left: 0, top: 0 };\n};\n/** @hidden */\nexport var getSelectionOptions = function (selectable) {\n    var enabled = selectable ?\n        (typeof selectable.enabled === 'boolean' ? selectable.enabled : true) :\n        false;\n    var drag = selectable ? Boolean(selectable.drag) : false;\n    var mode = selectable && selectable.mode ? selectable.mode : 'multiple';\n    var cell = Boolean(selectable && selectable.cell);\n    return { enabled: enabled, drag: drag, mode: mode, cell: cell };\n};\n/** @hidden */\nexport var GridSelection = function (props) {\n    var onRelease = props.onRelease;\n    var _a = getSelectionOptions(props.selectable), selectionEnabled = _a.enabled, selectionDrag = _a.drag, selectionMode = _a.mode, selectionCell = _a.cell;\n    var draggableRef = React.useRef(null);\n    var overlayElementRef = React.useRef(null);\n    var dragStartRef = React.useRef({ clientX: 0, clientY: 0 });\n    var _b = React.useState(null), overlaySettings = _b[0], setOverlaySettings = _b[1];\n    var offsetParentRef = React.useRef();\n    var isDraggedRef = React.useRef(false);\n    var onPressHandler = React.useCallback(function (eventData) {\n        var event = eventData.event;\n        if (!draggableRef.current) {\n            return;\n        }\n        offsetParentRef.current = relativeContextElement(draggableRef.current.element);\n        dragStartRef.current = {\n            clientY: event.clientY,\n            clientX: event.clientX\n        };\n    }, []);\n    var onDragHandler = React.useCallback(function (eventData) {\n        var event = eventData.event;\n        var _a = dragStartRef.current, clientX = _a.clientX, clientY = _a.clientY;\n        if (!selectionDrag || selectionMode === 'single') {\n            return;\n        }\n        if (Math.abs(clientY - event.clientY) > 5 || Math.abs(clientX - event.clientX) > 5) {\n            isDraggedRef.current = true;\n        }\n        if (isDraggedRef.current) {\n            var offset = getOffset(offsetParentRef.current);\n            setOverlaySettings({\n                top: Math.min(clientY, event.clientY) - offset.top,\n                left: Math.min(clientX, event.clientX) - offset.left,\n                width: Math.abs(event.clientX - clientX),\n                height: Math.abs(event.clientY - clientY)\n            });\n        }\n    }, [setOverlaySettings, selectionDrag, selectionMode]);\n    var onReleaseHandler = React.useCallback(function (eventData) {\n        var event = eventData.event;\n        var _a = dragStartRef.current, clientX = _a.clientX, clientY = _a.clientY;\n        if (!isDraggedRef.current) {\n            var startElement = document.elementFromPoint(clientX, clientY);\n            if (!startElement) {\n                return;\n            }\n            var tdElement = closestTagName(startElement, 'TD');\n            var trElement = closestTagName(startElement, 'TR');\n            var colIndex = getColumnIndex(tdElement);\n            var rowIndex = getRowIndex(trElement);\n            if (tdElement && trElement && rowIndex !== undefined && colIndex !== undefined) {\n                onRelease({\n                    nativeEvent: event.originalEvent,\n                    startRowIndex: rowIndex,\n                    startColIndex: colIndex,\n                    endRowIndex: rowIndex,\n                    endColIndex: colIndex,\n                    altKey: event.altKey,\n                    shiftKey: event.shiftKey,\n                    ctrlKey: event.ctrlKey,\n                    metaKey: event.originalEvent.metaKey,\n                    mode: selectionMode,\n                    cell: selectionCell,\n                    isDrag: false\n                });\n            }\n        }\n        else {\n            var top_1 = Math.min(clientY, event.clientY);\n            var left = Math.min(clientX, event.clientX);\n            var bottom = Math.max(clientY, event.clientY);\n            var right = Math.max(clientX, event.clientX);\n            var overlayElement = overlayElementRef.current;\n            if (!overlayElement) {\n                return;\n            }\n            overlayElement.style.visibility = 'hidden';\n            var startElement = document.elementFromPoint(left, top_1);\n            var endElement = document.elementFromPoint(right, bottom);\n            overlayElement.style.visibility = '';\n            if (!startElement || !endElement) {\n                return;\n            }\n            var startTdElement = closestTagName(startElement, 'TD');\n            var startTrElement = closestTagName(startTdElement, 'TR');\n            var endTdElement = closestTagName(endElement, 'TD');\n            var endTrElement = closestTagName(endTdElement, 'TR');\n            var startColIndex = getColumnIndex(startTdElement);\n            var startRowIndex = getRowIndex(startTrElement);\n            var endColIndex = getColumnIndex(endTdElement);\n            var endRowIndex = getRowIndex(endTrElement);\n            if (startColIndex !== undefined &&\n                startRowIndex !== undefined &&\n                endColIndex !== undefined &&\n                endRowIndex !== undefined) {\n                onRelease({\n                    nativeEvent: event.originalEvent,\n                    startRowIndex: startRowIndex,\n                    startColIndex: startColIndex,\n                    endRowIndex: endRowIndex,\n                    endColIndex: endColIndex,\n                    altKey: event.altKey,\n                    shiftKey: event.shiftKey,\n                    ctrlKey: event.ctrlKey,\n                    metaKey: event.originalEvent.metaKey,\n                    mode: selectionMode,\n                    cell: selectionCell,\n                    isDrag: true\n                });\n            }\n        }\n        setOverlaySettings(null);\n        isDraggedRef.current = false;\n        dragStartRef.current = { clientX: 0, clientY: 0 };\n    }, [setOverlaySettings, selectionMode, selectionCell, onRelease]);\n    if (!selectionEnabled) {\n        return props.children;\n    }\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Draggable, { onPress: onPressHandler, onDrag: onDragHandler, onRelease: onReleaseHandler, ref: draggableRef }, props.children),\n        overlaySettings && React.createElement(\"div\", { ref: overlayElementRef, style: __assign({}, overlaySettings, { position: 'fixed' }), className: 'k-marquee-color' })));\n};\n//# sourceMappingURL=GridSelection.js.map"]},"metadata":{},"sourceType":"module"}