{"ast":null,"code":"var _jsxFileName = \"/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/src/Admin/AdminDashboard/GraphVendor/GraphVendor.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./GraphVendor.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport { Chart, ChartLegend, ChartSeries, ChartSeriesItem, ChartTitle } from \"@progress/kendo-react-charts\";\nimport \"hammerjs\";\nimport { fetchDataByInsuranceType } from \"../../../reducers/DashboardReducer\";\nimport { fetchInsurancePolicyTypes } from \"../../../reducers/InsuranceTypeVendorReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GraphVendor() {\n  _s();\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const {\n    loading,\n    dataByInsuranceType\n  } = useSelector(state => state.dashboard);\n  const insuranceTypeVendor = useSelector(state => state.insuranceTypeVendor);\n  const [dataByInsuranceType1, setDataByInsuranceType1] = useState([]);\n  const [insuranceTypeId, setInsuranceTypeId] = useState(\"\");\n  useEffect(() => {\n    dispatch(fetchDataByInsuranceType());\n    dispatch(fetchInsurancePolicyTypes());\n  }, []);\n  useEffect(() => {\n    if (!loading && dataByInsuranceType) {\n      setDataByInsuranceType1(dataByInsuranceType);\n    }\n  }, [loading, dataByInsuranceType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-3\",\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        as: Row,\n        controlId: \"exampleForm.ControlSelect1\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          column: true,\n          sm: 2,\n          children: \"Insurance Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          sm: 10,\n          className: \"pr-5\",\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            required: true,\n            as: \"select\",\n            onChange: event => setInsuranceTypeId(event.target.value),\n            children: /*#__PURE__*/_jsxDEV(\"option\", {\n              value: null,\n              children: \"Please select insurance type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      children: [/*#__PURE__*/_jsxDEV(ChartTitle, {\n        text: \"Count of insurance sold distributed by insurance type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartLegend, {\n        position: \"bottom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartSeries, {\n        children: /*#__PURE__*/_jsxDEV(ChartSeriesItem, {\n          type: \"pie\",\n          data: dataByInsuranceType1,\n          field: \"totalCount\",\n          categoryField: \"insuranceTypeName\",\n          labels: {\n            visible: true,\n            content: props => {\n              return `${props.dataItem.insuranceTypeName} : ${props.dataItem.totalCount}`;\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GraphVendor, \"EWNjenf65Lcvjx2Q9u10BZSUIVQ=\", false, function () {\n  return [useHistory, useDispatch, useSelector, useSelector];\n});\n\n_c = GraphVendor;\nexport default GraphVendor;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphVendor\");","map":{"version":3,"sources":["/home/prateek/installation/bfsi/java/case_Study/loginform-cognito/src/Admin/AdminDashboard/GraphVendor/GraphVendor.jsx"],"names":["React","useEffect","useState","faTrash","faPencilAlt","FontAwesomeIcon","useDispatch","useSelector","Button","useHistory","Chart","ChartLegend","ChartSeries","ChartSeriesItem","ChartTitle","fetchDataByInsuranceType","fetchInsurancePolicyTypes","GraphVendor","history","dispatch","loading","dataByInsuranceType","state","dashboard","insuranceTypeVendor","dataByInsuranceType1","setDataByInsuranceType1","insuranceTypeId","setInsuranceTypeId","Row","event","target","value","visible","content","props","dataItem","insuranceTypeName","totalCount"],"mappings":"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","sourcesContent":["import \"./GraphVendor.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Chart,\n  ChartLegend,\n  ChartSeries,\n  ChartSeriesItem,\n  ChartTitle,\n} from \"@progress/kendo-react-charts\";\nimport \"hammerjs\";\n\nimport { fetchDataByInsuranceType } from \"../../../reducers/DashboardReducer\";\nimport { fetchInsurancePolicyTypes } from \"../../../reducers/InsuranceTypeVendorReducer\";\nfunction GraphVendor() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { loading, dataByInsuranceType } = useSelector(\n    (state) => state.dashboard\n  );\n  const insuranceTypeVendor = useSelector((state) => state.insuranceTypeVendor);\n  const [dataByInsuranceType1, setDataByInsuranceType1] = useState([]);\n  const [insuranceTypeId, setInsuranceTypeId] = useState(\"\");\n  useEffect(() => {\n    dispatch(fetchDataByInsuranceType());\n    dispatch(fetchInsurancePolicyTypes());\n  }, []);\n\n  useEffect(() => {\n    if (!loading && dataByInsuranceType) {\n      setDataByInsuranceType1(dataByInsuranceType);\n    }\n  }, [loading, dataByInsuranceType]);\n\n  return (\n    <div className=\"p-3\">\n      <Form>\n        <Form.Group as={Row} controlId=\"exampleForm.ControlSelect1\">\n          <Form.Label column sm={2}>\n            Insurance Type\n          </Form.Label>\n          <Col sm={10} className=\"pr-5\">\n            <Form.Control\n              required\n              as=\"select\"\n              onChange={(event) => setInsuranceTypeId(event.target.value)}\n            >\n              <option value={null}>Please select insurance type</option>\n              {/* {entities &&\n                entities.map((item) => (\n                  <option value={item.mainCategoryId} key={item.mainCategoryId}>\n                    {item.mainCategoryName}\n                  </option>\n                ))} */}\n            </Form.Control>\n          </Col>\n        </Form.Group>\n      </Form>\n      <Chart>\n        <ChartTitle text=\"Count of insurance sold distributed by insurance type\" />\n        <ChartLegend position=\"bottom\" />\n        <ChartSeries>\n          <ChartSeriesItem\n            type=\"pie\"\n            data={dataByInsuranceType1}\n            field=\"totalCount\"\n            categoryField=\"insuranceTypeName\"\n            labels={{\n              visible: true,\n              content: (props) => {\n                return `${props.dataItem.insuranceTypeName} : ${props.dataItem.totalCount}`;\n              },\n            }}\n          />\n        </ChartSeries>\n      </Chart>\n    </div>\n  );\n}\n\nexport default GraphVendor;\n"]},"metadata":{},"sourceType":"module"}