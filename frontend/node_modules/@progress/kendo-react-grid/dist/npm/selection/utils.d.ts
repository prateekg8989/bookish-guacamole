import { GridKeyDownEvent, GridSelectionChangeEvent } from '../interfaces/events';
/** @hidden */
export declare const closestTagName: (target: HTMLElement, tagName: "TD" | "TR" | "TABLE") => HTMLElement;
/** @hidden */
export declare const getRowIndex: (element: HTMLTableRowElement) => number;
/** @hidden */
export declare const getColumnIndex: (element: HTMLTableCellElement) => number;
/**
 * @hidden
 *
 * Apply the selected field to the data items based on the selected state.
 *
 * @param {{data: any, selectedState:  {[id: string]: boolean | number[]}, dataItemKey: string; selectedField: string; subItemsField?: string; }} options
 * @returns {any[]}
 */
export declare const setSelectedState: (options: {
    data: any;
    selectedState: {
        [id: string]: boolean | number[];
    };
    dataItemKey: string;
    selectedField: string;
    subItemsField?: string;
}) => any[];
/**
 * Get selected state from the Grid KeyDown event.
 *
 * @param {{event: GridKeyDownEvent, selectedState:  {[id: string]: boolean | number[]}, dataItemKey: string}} options
 * @returns {{[id: string]: boolean | number[]}} - The new selected state.
 */
export declare const getSelectedStateFromKeyDown: (options: {
    event: GridKeyDownEvent;
    selectedState: {
        [id: string]: boolean | number[];
    };
    dataItemKey: string;
}) => {
    [id: string]: boolean | number[];
};
/**
 * Get selected state from the Grid selection event.
 *
 * @param {{event: GridSelectionChangeEvent, selectedState:  {[id: string]: boolean | number[]}, dataItemKey: string}} options
 * @returns {{[id: string]: boolean | number[]}} - The new selected state.
 */
export declare const getSelectedState: (options: {
    event: GridSelectionChangeEvent;
    selectedState: {
        [id: string]: boolean | number[];
    };
    dataItemKey: string;
}) => {
    [id: string]: boolean | number[];
};
